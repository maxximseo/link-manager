/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
 */
window.ProjectsModule = {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    async load(page = null) {
        try {
            const currentPage = page || app.getCurrentPage('projects');
            const limit = app.getItemsPerPage();
            
            console.log('Loading projects...');
            const response = await api.getProjects(currentPage, limit);
            
            if (Array.isArray(response)) {
                // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                this.display(response);
                window.PaginationComponent.hide('projects');
            } else {
                // –û—Ç–≤–µ—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                this.display(response.data || []);
                window.PaginationComponent.update('projects', response.pagination);
                app.setCurrentPage('projects', response.pagination.page);
            }
            
        } catch (error) {
            console.error('Error loading projects:', error);
            AppUtils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
        }
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    display(projects) {
        const container = AppUtils.checkElement('projectsList');
        if (!container) return;
        
        if (projects.length === 0) {
            container.innerHTML = `
                <p style="color: #718096; text-align: center; padding: 40px;">
                    –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤—ã—à–µ!
                </p>
            `;
            return;
        }
        
        const projectsHTML = projects.map(project => {
            const totalPlacements = (project.placed_links_count || 0) + (project.placed_articles_count || 0);
            const createdDate = AppUtils.formatDate(project.created_at);
            
            return `
                <div class="project-card">
                    <div class="project-info">
                        <div class="project-header">
                            <h4 onclick="ProjectsModule.openProject(${project.id})" style="cursor: pointer; color: #3182ce;">
                                ${AppUtils.escapeHtml(project.name)}
                            </h4>
                            <div class="project-actions">
                                <button onclick="ProjectsModule.openProject(${project.id})" class="btn btn-sm">
                                    –û—Ç–∫—Ä—ã—Ç—å
                                </button>
                                <button onclick="ProjectsModule.deleteProject(${project.id})" 
                                        class="btn btn-sm btn-danger"
                                        title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç">
                                    ‚úï
                                </button>
                            </div>
                        </div>
                        <p class="project-description">${AppUtils.escapeHtml(project.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
                        <div class="project-stats">
                            <span>üìÖ –°–æ–∑–¥–∞–Ω: ${createdDate}</span>
                            <span>üîó –°—Å—ã–ª–æ–∫: ${project.links_count || 0}</span>
                            <span>üìù –°—Ç–∞—Ç–µ–π: ${project.articles_count || 0}</span>
                            <span>üìç –†–∞–∑–º–µ—â–µ–Ω–∏–π: ${AppUtils.formatNumber(totalPlacements)}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = projectsHTML;
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    async handleCreateProject(event) {
        event.preventDefault();
        
        try {
            const nameEl = AppUtils.checkElement('projectName');
            const descriptionEl = AppUtils.checkElement('projectDescription');
            
            if (!nameEl || !descriptionEl) {
                throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Ñ–æ—Ä–º—ã');
            }
            
            const name = nameEl.value.trim();
            const description = descriptionEl.value.trim();
            
            if (!name) {
                AppUtils.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', 'warning');
                return;
            }
            
            console.log('Creating project:', name);
            await api.createProject(name, description);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            nameEl.value = '';
            descriptionEl.value = '';
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            await this.load();
            
            AppUtils.showNotification('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            
        } catch (error) {
            console.error('Error creating project:', error);
            AppUtils.showNotification(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`, 'error');
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    async deleteProject(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }
        
        try {
            console.log('Deleting project:', id);
            await api.deleteProject(id);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            await this.load();
            
            AppUtils.showNotification('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω', 'success');
            
        } catch (error) {
            console.error('Error deleting project:', error);
            AppUtils.showNotification(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`, 'error');
        }
    },

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    async openProject(id) {
        try {
            console.log('Opening project:', id);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const project = await api.getProject(id);
            
            if (window.ProjectModal && typeof window.ProjectModal.show === 'function') {
                window.ProjectModal.show(project);
            } else {
                console.warn('ProjectModal –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö');
                AppUtils.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞', 'warning');
            }
            
        } catch (error) {
            console.error('Error opening project:', error);
            AppUtils.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`, 'error');
        }
    },

    // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    showProjectModal(project, placements = []) {
        if (window.ProjectModal && typeof window.ProjectModal.show === 'function') {
            // –ü–æ–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            window.ProjectModal.show(project);
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
    async updatePlacementStats() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
        await this.load();
    },

    // Cyrillic to Latin transliteration mapping
    cyrillicToLatin: {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
        '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        // Uppercase
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch', '–™': '',
        '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    },

    // Transliterate Russian text to Latin
    transliterate(text) {
        return text.split('').map(char => this.cyrillicToLatin[char] || char).join('');
    },

    // Generate slug from title with Russian support
    generateSlug(projectId) {
        const title = document.getElementById(`articleTitle_${projectId}`).value;
        const slugField = document.getElementById(`articleSlug_${projectId}`);
        
        if (slugField && !slugField.dataset.userModified) {
            // Transliterate Russian characters
            const transliterated = this.transliterate(title);
            
            // Convert to slug format
            const slug = transliterated
                .toLowerCase()
                .replace(/[^\w\s-]/g, '') // Remove special characters
                .replace(/\s+/g, '-')     // Replace spaces with hyphens
                .replace(/-+/g, '-')      // Replace multiple hyphens with single hyphen
                .replace(/^-+|-+$/g, '')  // Remove leading/trailing hyphens
                .trim();
            
            slugField.value = slug;
        }
    },

    // Add link to project
    async addLinkToProject(event, projectId) {
        event.preventDefault();
        
        const htmlInput = document.getElementById('linkHtml').value;
        
        // Parse HTML to extract link and context
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlInput, 'text/html');
        const linkElement = doc.querySelector('a');
        
        if (!linkElement) {
            AppUtils.showNotification('Please include a link in HTML format: <a href="url">text</a>', 'error');
            return;
        }
        
        const url = linkElement.getAttribute('href');
        const anchor_text = linkElement.textContent;
        const html_context = htmlInput.trim();
        
        if (!url || !anchor_text) {
            AppUtils.showNotification('Invalid link format. Please check your HTML.', 'error');
            return;
        }
        
        try {
            const response = await api.request(`/api/projects/${projectId}/links`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url, anchor_text, html_context })
            });
            
            if (response.ok) {
                const addLinkForm = document.getElementById('addLinkForm');
                if (addLinkForm) {
                    addLinkForm.reset();
                }
                
                // Reload project details if project modal is open
                if (window.ProjectModal && window.ProjectModal.isOpen) {
                    await window.ProjectModal.loadProject(projectId);
                }
                
                AppUtils.showNotification('Link added successfully!', 'success');
            } else {
                const error = await response.json();
                throw new Error(error.error || 'Unknown error');
            }
        } catch (error) {
            console.error('Error adding link:', error);
            AppUtils.showNotification(`Failed to add link: ${error.message}`, 'error');
        }
    },

    // Delete link from project
    async deleteLinkFromProject(projectId, linkId) {
        if (!confirm('Are you sure you want to delete this link?')) return;
        
        try {
            const response = await api.request(`/api/projects/${projectId}/links/${linkId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                // Reload project details if project modal is open
                if (window.ProjectModal && window.ProjectModal.isOpen) {
                    await window.ProjectModal.loadProject(projectId);
                }
                
                AppUtils.showNotification('Link deleted successfully!', 'success');
            } else {
                throw new Error('Failed to delete link');
            }
        } catch (error) {
            console.error('Error deleting link:', error);
            AppUtils.showNotification('Error deleting link', 'error');
        }
    },


    // Initialize slug field event listeners
    initSlugFieldListeners() {
        // Mark slug field as user-modified when manually edited
        document.addEventListener('input', function(e) {
            if (e.target.id && e.target.id.includes('articleSlug_')) {
                e.target.dataset.userModified = 'true';
            }
        });
    }
};

// Global function exports for HTML onclick handlers
window.addLinkToProject = (event, projectId) => {
    return window.ProjectsModule.addLinkToProject(event, projectId);
};

window.deleteLinkFromProject = (projectId, linkId) => {
    return window.ProjectsModule.deleteLinkFromProject(projectId, linkId);
};


window.generateSlug = (projectId) => {
    return window.ProjectsModule.generateSlug(projectId);
};

// Initialize slug field listeners when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.ProjectsModule.initSlugFieldListeners();
});

const PROJECT_MODAL_IDS = {
    modal: 'projectModal',
    title: 'modalProjectName',
    content: 'modalProjectContent'
};

function projectModalElement() {
    return document.getElementById(PROJECT_MODAL_IDS.modal);
}

function projectModalTitleElement() {
    return document.getElementById(PROJECT_MODAL_IDS.title);
}

function projectModalContentElement() {
    return document.getElementById(PROJECT_MODAL_IDS.content);
}

function formatProjectModalDate(value) {
    try {
        return new Date(value).toLocaleString('ru-RU');
    } catch (error) {
        return value || '';
    }
}

function renderProjectModalLinks(project) {
    const links = project.links || [];
    const projectId = project.id;

    const listHtml = links.length > 0
        ? links.map(link => `
            <div class="project-item">
                <div class="project-item-main">
                    <div class="project-item-title">${AppUtils.escapeHtml(link.anchor_text || link.url || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                    <div class="project-item-meta">${AppUtils.escapeHtml(link.url || '')}</div>
                    ${link.html_context ? `<div class="project-item-context">${link.html_context}</div>` : ''}
                </div>
                <div class="project-item-actions">
                    <button class="btn btn-sm btn-danger" onclick="deleteLinkFromProject(${projectId}, ${link.id})">‚úï</button>
                </div>
            </div>`).join('')
        : '<p style="color:#718096;">–°—Å—ã–ª–∫–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</p>';

    return `
        <section class="modal-section">
            <div class="modal-section-header">
                <h4>–°—Å—ã–ª–∫–∏ <span class="badge">${links.length}</span></h4>
            </div>
            <div class="modal-section-body">
                ${listHtml}
            </div>
            <div class="modal-section-footer">
                <form id="addLinkForm" onsubmit="ProjectsModule.addLinkToProject(event, ${projectId})" class="form-vertical">
                    <label for="linkHtml">HTML —Å—Å—ã–ª–∫–∞:</label>
                    <textarea id="linkHtml" rows="3" placeholder="&lt;a href=&quot;https://example.com&quot;&gt;–ê–Ω–∫–æ—Ä&lt;/a&gt;" required></textarea>
                    <div class="form-actions">
                        <button type="submit" class="btn">–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</button>
                    </div>
                </form>
                <div class="bulk-section">
                    <h5>–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç</h5>
                    <textarea id="bulkLinksInput" rows="4" placeholder="–û–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ HTML"></textarea>
                    <div class="form-actions" style="gap:10px;">
                        <button class="btn btn-secondary" type="button" onclick="BulkLinksModule.previewBulkLinks(${projectId})">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                        <button class="btn" type="button" onclick="BulkLinksModule.importBulkLinks(${projectId})">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                    <div id="bulkPreview" style="display:none;"></div>
                </div>
            </div>
        </section>
    `;
}

function renderProjectModalArticles(project) {
    const articles = project.articles || [];
    const projectId = project.id;

    const listHtml = articles.length > 0
        ? articles.map(article => {
            const created = article.created_at ? formatProjectModalDate(article.created_at) : '';
            return `
                <div class="project-item">
                    <div class="project-item-main">
                        <div class="project-item-title">${AppUtils.escapeHtml(article.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}</div>
                        <div class="project-item-meta">${article.slug ? AppUtils.escapeHtml(article.slug) : '&lt;–±–µ–∑ —Å–ª–∞–≥–∞&gt;'}</div>
                        ${created ? `<div class="project-item-meta">–°–æ–∑–¥–∞–Ω–æ: ${created}</div>` : ''}
                    </div>
                    <div class="project-item-actions" style="gap:6px;">
                        <button class="btn btn-sm" onclick="ArticlesModule.editArticle(${projectId}, ${article.id})">‚úé</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteArticleFromProject(${projectId}, ${article.id})">‚úï</button>
                    </div>
                </div>`;
        }).join('')
        : '<p style="color:#718096;">–°—Ç–∞—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.</p>';

    return `
        <section class="modal-section">
            <div class="modal-section-header">
                <h4>–°—Ç–∞—Ç—å–∏ <span class="badge">${articles.length}</span></h4>
            </div>
            <div class="modal-section-body">
                ${listHtml}
            </div>
            <div class="modal-section-footer">
                <form onsubmit="ArticlesModule.addArticleToProject(event, ${projectId})" class="form-vertical">
                    <label for="articleTitle_${projectId}">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                    <input id="articleTitle_${projectId}" type="text" placeholder="–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫" required>
                    <label for="articleSlug_${projectId}">–°–ª–∞–≥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                    <input id="articleSlug_${projectId}" type="text" placeholder="–±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏">
                    <textarea id="articleContent_${projectId}" style="display:none;"></textarea>
                    <label>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</label>
                    <div id="quillEditor_${projectId}" class="quill-editor"></div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="ProjectsModule.generateSlug(${projectId})">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–≥</button>
                        <button type="submit" class="btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é</button>
                    </div>
                </form>
            </div>
        </section>
    `;
}

function renderProjectModalMeta(project) {
    const created = project.created_at ? formatProjectModalDate(project.created_at) : '-';
    const updated = project.updated_at ? formatProjectModalDate(project.updated_at) : '-';
    const description = project.description ? AppUtils.escapeHtml(project.description) : '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    return `
        <section class="modal-section">
            <div class="modal-section-header">
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            </div>
            <div class="modal-section-body project-meta">
                <p><strong>ID –ø—Ä–æ–µ–∫—Ç–∞:</strong> ${project.id}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω:</strong> ${created}</p>
                <p><strong>–û–±–Ω–æ–≤–ª—ë–Ω:</strong> ${updated}</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${description}</p>
            </div>
        </section>
    `;
}

function renderProjectModal(project) {
    const titleEl = projectModalTitleElement();
    const contentEl = projectModalContentElement();

    if (!titleEl || !contentEl) {
        console.error('ProjectModal: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        return;
    }

    titleEl.textContent = project.name || '–ü—Ä–æ–µ–∫—Ç';

    const sections = [
        renderProjectModalMeta(project),
        renderProjectModalLinks(project),
        renderProjectModalArticles(project)
    ];

    contentEl.innerHTML = sections.join('\n');

    if (window.ArticlesModule && typeof window.ArticlesModule.initializeQuillEditor === 'function') {
        setTimeout(() => {
            window.ArticlesModule.initializeQuillEditor(project.id);
        }, 0);
    }
}

window.ProjectModal = {
    currentProjectId: null,

    show(project) {
        if (!project || typeof project !== 'object') {
            console.error('ProjectModal.show: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞', project);
            return;
        }

        this.currentProjectId = project.id;
        renderProjectModal(project);

        if (window.ModalsComponent) {
            window.ModalsComponent.openModal(PROJECT_MODAL_IDS.modal);
        } else {
            const modal = projectModalElement();
            if (modal) {
                modal.classList.add('active');
            }
        }
    },

    close() {
        this.currentProjectId = null;

        if (window.ModalsComponent) {
            window.ModalsComponent.closeModal(PROJECT_MODAL_IDS.modal);
        } else {
            const modal = projectModalElement();
            if (modal) {
                modal.classList.remove('active');
            }
        }
    },

    async loadProject(projectId) {
        try {
            const id = projectId || this.currentProjectId;
            if (!id) {
                return;
            }

            const project = await window.api.getProject(id);
            if (!project) {
                throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            this.show(project);
        } catch (error) {
            console.error('ProjectModal.loadProject error:', error);
            AppUtils.showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç: ${error.message}`, 'error');
        }
    }
};

Object.defineProperty(window.ProjectModal, 'isOpen', {
    get() {
        const modal = projectModalElement();
        return !!(modal && modal.classList.contains('active'));
    }
});

